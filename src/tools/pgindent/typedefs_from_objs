#!/usr/bin/env python3

# Tool to extract typedefs from object files.

import argparse
import re
import shutil
import subprocess
import sys

parser = argparse.ArgumentParser(
    description='generate typedefs file for a set of object files')

parser.add_argument('--output', type=argparse.FileType('w'), required=True)
parser.add_argument('--host', type=str, required=True)
parser.add_argument('input', nargs='*')

args = parser.parse_args()

if args.host == 'linux':
    find_td_re = re.compile(r'^[^\n]+TAG_typedef\)\n[^\n]+DW_AT_name\s*:\s*\([^\)]+\): ([^\n]+)$', re.MULTILINE)
    # FIXME: should probably be set by the caller? Except that the same binary
    # name behaves very differently on different platforms :/
    cmd = [shutil.which('objdump'), '-Wi']
elif args.host == 'darwin':
    find_td_re = re.compile(r'^[^\n]+TAG_typedef\n\s*DW_AT_type[^\n]+\n\s+DW_AT_name\s*\(\"([^\n]+)\"\)$', re.MULTILINE)
    cmd = [shutil.which('dwarfdump')]
else:
    raise f'unsupported platform: {args.host}'

lcmd = cmd + args.input
sp = subprocess.run(lcmd, stdout=subprocess.PIPE, universal_newlines=True)
if sp.returncode != 0:
    print(f'{lcmd} failed with return code {sp.returncode}', file=sys.stderr)
    sys.exit(sp.returncode)

fa = find_td_re.findall(sp.stdout)

for typedef in fa:
    print(typedef, file=args.output)

sys.exit(0)
